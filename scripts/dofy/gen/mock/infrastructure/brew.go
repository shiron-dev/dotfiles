// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/brew.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/brew.go -destination=./gen/mock/infrastructure/brew.go
//

// Package mock_infrastructure is a generated GoMock package.
package mock_infrastructure

import (
	context "context"
	io "io"
	reflect "reflect"

	domain "github.com/shiron-dev/dotfiles/scripts/dofy/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBrewInfrastructure is a mock of BrewInfrastructure interface.
type MockBrewInfrastructure struct {
	ctrl     *gomock.Controller
	recorder *MockBrewInfrastructureMockRecorder
	isgomock struct{}
}

// MockBrewInfrastructureMockRecorder is the mock recorder for MockBrewInfrastructure.
type MockBrewInfrastructureMockRecorder struct {
	mock *MockBrewInfrastructure
}

// NewMockBrewInfrastructure creates a new mock instance.
func NewMockBrewInfrastructure(ctrl *gomock.Controller) *MockBrewInfrastructure {
	mock := &MockBrewInfrastructure{ctrl: ctrl}
	mock.recorder = &MockBrewInfrastructureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrewInfrastructure) EXPECT() *MockBrewInfrastructureMockRecorder {
	return m.recorder
}

// CleanupBrewBundle mocks base method.
func (m *MockBrewInfrastructure) CleanupBrewBundle(path string, isForce bool, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupBrewBundle", path, isForce, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupBrewBundle indicates an expected call of CleanupBrewBundle.
func (mr *MockBrewInfrastructureMockRecorder) CleanupBrewBundle(path, isForce, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupBrewBundle", reflect.TypeOf((*MockBrewInfrastructure)(nil).CleanupBrewBundle), path, isForce, sout, serror)
}

// DumpTmpBrewBundle mocks base method.
func (m *MockBrewInfrastructure) DumpTmpBrewBundle(path string, isMac bool, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTmpBrewBundle", path, isMac, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpTmpBrewBundle indicates an expected call of DumpTmpBrewBundle.
func (mr *MockBrewInfrastructureMockRecorder) DumpTmpBrewBundle(path, isMac, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTmpBrewBundle", reflect.TypeOf((*MockBrewInfrastructure)(nil).DumpTmpBrewBundle), path, isMac, sout, serror)
}

// InstallBrewBundle mocks base method.
func (m *MockBrewInfrastructure) InstallBrewBundle(path string, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallBrewBundle", path, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallBrewBundle indicates an expected call of InstallBrewBundle.
func (mr *MockBrewInfrastructureMockRecorder) InstallBrewBundle(path, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallBrewBundle", reflect.TypeOf((*MockBrewInfrastructure)(nil).InstallBrewBundle), path, sout, serror)
}

// InstallByMas mocks base method.
func (m *MockBrewInfrastructure) InstallByMas(pkg string, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallByMas", pkg, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallByMas indicates an expected call of InstallByMas.
func (mr *MockBrewInfrastructureMockRecorder) InstallByMas(pkg, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallByMas", reflect.TypeOf((*MockBrewInfrastructure)(nil).InstallByMas), pkg, sout, serror)
}

// InstallFormula mocks base method.
func (m *MockBrewInfrastructure) InstallFormula(pkg string, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallFormula", pkg, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallFormula indicates an expected call of InstallFormula.
func (mr *MockBrewInfrastructureMockRecorder) InstallFormula(pkg, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallFormula", reflect.TypeOf((*MockBrewInfrastructure)(nil).InstallFormula), pkg, sout, serror)
}

// InstallHomebrew mocks base method.
func (m *MockBrewInfrastructure) InstallHomebrew(ctx context.Context, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallHomebrew", ctx, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallHomebrew indicates an expected call of InstallHomebrew.
func (mr *MockBrewInfrastructureMockRecorder) InstallHomebrew(ctx, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHomebrew", reflect.TypeOf((*MockBrewInfrastructure)(nil).InstallHomebrew), ctx, sout, serror)
}

// InstallTap mocks base method.
func (m *MockBrewInfrastructure) InstallTap(pkg string, sout, serror io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallTap", pkg, sout, serror)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallTap indicates an expected call of InstallTap.
func (mr *MockBrewInfrastructureMockRecorder) InstallTap(pkg, sout, serror any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallTap", reflect.TypeOf((*MockBrewInfrastructure)(nil).InstallTap), pkg, sout, serror)
}

// ReadBrewBundle mocks base method.
func (m *MockBrewInfrastructure) ReadBrewBundle(path string) ([]domain.BrewBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBrewBundle", path)
	ret0, _ := ret[0].([]domain.BrewBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBrewBundle indicates an expected call of ReadBrewBundle.
func (mr *MockBrewInfrastructureMockRecorder) ReadBrewBundle(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBrewBundle", reflect.TypeOf((*MockBrewInfrastructure)(nil).ReadBrewBundle), path)
}

// SetHomebrewEnv mocks base method.
func (m *MockBrewInfrastructure) SetHomebrewEnv(goos string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHomebrewEnv", goos)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHomebrewEnv indicates an expected call of SetHomebrewEnv.
func (mr *MockBrewInfrastructureMockRecorder) SetHomebrewEnv(goos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHomebrewEnv", reflect.TypeOf((*MockBrewInfrastructure)(nil).SetHomebrewEnv), goos)
}

// WriteBrewBundle mocks base method.
func (m *MockBrewInfrastructure) WriteBrewBundle(path string, bundles []domain.BrewBundle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBrewBundle", path, bundles)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBrewBundle indicates an expected call of WriteBrewBundle.
func (mr *MockBrewInfrastructureMockRecorder) WriteBrewBundle(path, bundles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBrewBundle", reflect.TypeOf((*MockBrewInfrastructure)(nil).WriteBrewBundle), path, bundles)
}
