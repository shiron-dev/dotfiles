// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/file.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/file.go -destination=./gen/mock/infrastructure/file.go
//

// Package mock_infrastructure is a generated GoMock package.
package mock_infrastructure

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileInfrastructure is a mock of FileInfrastructure interface.
type MockFileInfrastructure struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfrastructureMockRecorder
	isgomock struct{}
}

// MockFileInfrastructureMockRecorder is the mock recorder for MockFileInfrastructure.
type MockFileInfrastructureMockRecorder struct {
	mock *MockFileInfrastructure
}

// NewMockFileInfrastructure creates a new mock instance.
func NewMockFileInfrastructure(ctrl *gomock.Controller) *MockFileInfrastructure {
	mock := &MockFileInfrastructure{ctrl: ctrl}
	mock.recorder = &MockFileInfrastructureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfrastructure) EXPECT() *MockFileInfrastructureMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockFileInfrastructure) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileInfrastructureMockRecorder) ReadFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileInfrastructure)(nil).ReadFile), path)
}

// WriteFile mocks base method.
func (m *MockFileInfrastructure) WriteFile(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileInfrastructureMockRecorder) WriteFile(path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileInfrastructure)(nil).WriteFile), path, data)
}
