// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/vscode.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/vscode.go -destination=./gen/mock/infrastructure/vscode.go
//

// Package mock_infrastructure is a generated GoMock package.
package mock_infrastructure

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVSCodeInfrastructure is a mock of VSCodeInfrastructure interface.
type MockVSCodeInfrastructure struct {
	ctrl     *gomock.Controller
	recorder *MockVSCodeInfrastructureMockRecorder
	isgomock struct{}
}

// MockVSCodeInfrastructureMockRecorder is the mock recorder for MockVSCodeInfrastructure.
type MockVSCodeInfrastructureMockRecorder struct {
	mock *MockVSCodeInfrastructure
}

// NewMockVSCodeInfrastructure creates a new mock instance.
func NewMockVSCodeInfrastructure(ctrl *gomock.Controller) *MockVSCodeInfrastructure {
	mock := &MockVSCodeInfrastructure{ctrl: ctrl}
	mock.recorder = &MockVSCodeInfrastructureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVSCodeInfrastructure) EXPECT() *MockVSCodeInfrastructureMockRecorder {
	return m.recorder
}

// ListExtensions mocks base method.
func (m *MockVSCodeInfrastructure) ListExtensions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensions indicates an expected call of ListExtensions.
func (mr *MockVSCodeInfrastructureMockRecorder) ListExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensions", reflect.TypeOf((*MockVSCodeInfrastructure)(nil).ListExtensions))
}
